class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        if (connections.size() < n - 1) return -1;
        
        unordered_map<int, vector<int>> adj;
        for(auto it: connections) {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        vector<bool> visited(n,0);
        queue<int> q;
        int count = 0;
        for(int i=0 ; i<n ; i++){
            if(!visited[i]){
                q.push(i);
                while(!q.empty()) {
                    int node = q.front();
                    q.pop();
                    visited[node] = true;

                    for(auto it : adj[node]) {
                        if(!visited[it]) {
                            visited[it] = true;
                            q.push(it);
                        }
                    }
                }
                count++;
            }
        }
        return count-1;
    }
};
