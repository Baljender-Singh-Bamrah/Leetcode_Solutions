========================================================Aproach-1=============================================================

class Solution {
public:
    int maxProfitAssignment(vector<int>& d, vector<int>& p, vector<int>& w) {
        int x=0;
        vector<pair<int,int>> job;
        for(int i=0 ; i<d.size() ; i++)
        {
            job.push_back({d[i],p[i]});
        }
        sort(job.begin(),job.end());
        for(int i=0 ; i<w.size() ; i++)
        {
            int j=0,sum=0;
            while(j<p.size() && w[i]>=job[j].first )
            {
                sum=max(sum,job[j].second);
                j++;
            }
            x+=sum;
        }
        return x;
    }
};

========================================================Aproach-2=============================================================
class Solution {
public:
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        int sum=0;
        for(int i=0 ; i<worker.size() ; i++)
        {
            int maxi=0;
            int m=i;
            bool flag=false;
            for(int j=0 ; j<difficulty.size() ; j++)
            {
                if(difficulty[j]<=worker[i])
                {
                    if(profit[j]>=maxi)
                    {
                        m=j;

                        maxi=profit[j];
                        flag=true;
                    }
                }
            }
            if(flag)
                sum+=profit[m];
        }
        return sum;
    }
};
