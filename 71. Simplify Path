Approach 1 : Using Stack :-

class Solution {
public:
    string simplifyPath(string path) {
        stack<string> st;
        string ans="";
        for( int i=0 ; i<path.size() ; i++ ) {
            if(path[i] == '/')    
                continue;
            int count=0;
            string temp="";
            while(i<path.size() && path[i]!='/') {
                if(path[i]=='.')
                    count++;
                temp+=path[i];
                i++;
            }
            if(temp==".") {
                continue;
            }
            else if(temp==".."){
                if(!st.empty()) {
                    st.pop();
                }   
            }

            else{
                st.push(temp);
            }
        }

        while(!st.empty()) {
            ans="/"+st.top()+ans;
            st.pop();
        }

        if(ans==""){
            return "/";
        }
        
        return ans;
    }
};

Approach 2 : Using StringStream

class Solution {
public:
    string simplifyPath(string path) {
        vector<string>st;
        string token="";
        stringstream ss(path);
        while(getline(ss,token,'/')){
            if(token=="" || token== "." ){
                continue;
            }
            else if(token!=".."){
                 st.push_back(token);
            }
            else{
               if(!st.empty()){
                st.pop_back();
               }
                
            }
        }
        if(st.empty()){
            return "/";
        }
        string a="";
        for(auto &it:st){
            a += '/'+it;
        }
        return a;
    }
};
