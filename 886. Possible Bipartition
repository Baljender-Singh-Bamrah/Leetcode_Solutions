class Solution {
public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        
        vector<int> adj[n+1];
        vector<int> vis(n+1,-1);
        
        for(auto it:dislikes){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
       
       for(int i=1;i<=n;i++){
           if(vis[i]!=-1) continue;
            queue<int> q;
           q.push(i);
       vis[i]=0;
        while(!q.empty()){
            int node=q.front();
           q.pop();
            for(auto child:adj[node]){
                if(vis[child]==-1){
                   vis[child]=!vis[node];
                   q.push(child);
                }
                else if(vis[child]==vis[node]){
                    cout<<child<<endl;
                    return false;
                }
            }
        }
       }
        return true;
    }
};
