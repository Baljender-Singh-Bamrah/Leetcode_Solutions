class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int> mp;
        for(auto &it: words) {
            mp[it]++;
        }
        priority_queue<pair<int, string>> pq;
        for(auto &[first, second]: mp) {
            pq.push({second, first});
        }
        vector<string> ans;
        while(k && !pq.empty()) {
            vector<string> temp;
            pair<int, string> p = pq.top();
            temp.push_back(p.second);
            pq.pop();
            while(!pq.empty() && pq.top().first == p.first) {
                temp.push_back(pq.top().second);
                pq.pop();
            }
            sort(temp.begin(), temp.end());
            for(int i=0 ; i<temp.size() ; i++) {
                if(k) {
                    ans.push_back(temp[i]);
                    k--;
                } else {
                    break;
                }
            }
        }
        
        return ans;
    }
};
