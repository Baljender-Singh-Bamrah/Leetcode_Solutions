Approach 1 :

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        do{
            int index=-1;
            for(int i=n-2 ; i>=0 ; i--){
                if(nums[i]<nums[i+1]){
                    index=i;
                    break;
                }
            }

            if(index==-1){
                reverse(nums.begin(),nums.end());
                ans.push_back(nums);
                break;
            }

            else{
                for(int i=n-1 ; i>=0 ; i--){
                    if(nums[i]>nums[index]){
                        swap(nums[i],nums[index]);
                        break;
                    }
                }
            }

            reverse(nums.begin()+index+1,nums.end());
            ans.push_back(nums);
        }while(true);

        return ans;
    }
};



Approach 2 :

class Solution {
public:
  
    int factorial(int n){ 
        // single line to find factorial 
        return (n==1 || n==0) ? 1: n * factorial(n - 1);  
    } 

    vector<vector<int>> permute(vector<int>& a) {
       vector<vector<int>>ans;
        int n=a.size();
        n=factorial(n);
        while(n--){
            next_permutation(a.begin(),a.end());
            ans.push_back(a);
        }
        return ans;
    }
};
