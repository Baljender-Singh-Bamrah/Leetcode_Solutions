class Solution {
public:
    vector<vector<int>> ans;
    void dfs(vector<vector<int>>& graph, int src, int dest, vector<int>& temp) {
        temp.push_back(src);
        
        if(src == dest){
            ans.push_back(temp);
            temp.pop_back();
            return;
        }

        for(auto &it : graph[src]) {
            dfs(graph, it, dest, temp);
        }
        temp.pop_back();
    }

    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> temp;
        dfs(graph, 0, n-1,temp);
        return ans;
    }
};
