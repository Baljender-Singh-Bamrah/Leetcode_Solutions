class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        unordered_map<int, vector<pair<int, int>>> adj;
        vector<int> dist(n, INT_MAX);

        for(auto &it : flights) {
            int u = it[0];
            int v = it[1];
            int p = it[2];

            adj[u].push_back({v, p});
        }
        
        queue<pair<int, int>> que;
        que.push({src, 0});
        int stop = 0;

        while(!que.empty() && stop <= k) {
            int size = que.size();

            while(size--) {
                auto [curr, dis] = que.front();
                que.pop();
            
                for(auto &it : adj[curr]) {
                    int v = it.first;
                    int new_dis = it.second + dis;

                    if(dist[v] > new_dis) {
                        dist[v] = new_dis;
                        que.push({v, new_dis});
                    }
                }
            }

            stop++;
        }


        return dist[dst] == INT_MAX ? -1 : dist[dst] ;
    }
};
