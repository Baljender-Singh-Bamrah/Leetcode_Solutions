/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<int> in;
    void inorder(TreeNode *root) {
        if(!root) return;

        inorder(root->left);
        in.push_back(root->val);
        inorder(root->right);
    }
    void dfs(TreeNode *root, unordered_map<int,int> &mp) {
        if(!root) return;

        root->val = mp[root->val];
        dfs(root->left, mp);
        dfs(root->right, mp);
    }
public:
    TreeNode* convertBST(TreeNode* root) {
        inorder(root);
        vector<int> pre(in.begin(), in.end());
        for(int i=1 ; i<in.size() ; i++) {
            pre[i]+=pre[i-1];
        }
        int n = pre.size();
        unordered_map<int, int> mp;
        for (int i = 0; i < in.size(); i++) {
            if (i == 0) {
                mp[in[i]] = pre[n - 1];
            } else {
                mp[in[i]] = pre[n - 1] - pre[i - 1];
            }
        }

        dfs(root, mp);
        return root;
    }
};
