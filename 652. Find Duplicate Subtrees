/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<string, int> mp;
    vector<TreeNode*> res;

    string solve(TreeNode *root) {
        if(!root) return "N";

        string ans = to_string(root->val) + " , " + solve(root->left) + " , " + solve(root->right);

        if(mp[ans]==1) 
            res.push_back(root);
        
        mp[ans]++;

        return ans;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        solve(root);

        return res;
    }
};
