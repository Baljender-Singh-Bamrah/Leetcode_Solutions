Approach 1 :- 

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        vector<int> vec;

        while(head) {
            vec.push_back(head->val);
            head = head->next;
        }

        reverse(vec.begin()+left-1 , vec.begin()+right);

        ListNode* result = new ListNode(0);
        ListNode* temp = result;

        for(auto it : vec) {
            ListNode* t = new ListNode(it);
            result->next = t;
            result = t;
        }

        return temp->next;
    }
};

Approach 2 :-

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        vector<int> v;
        ListNode *temp=head;
        int x=1;
        while(temp && x<left){
            temp=temp->next;
            x++;
        }
        while(temp && x<=right){
            v.push_back(temp->val);
            temp=temp->next;
            x++;
        }
        reverse(begin(v),end(v));
        x=1;
        temp=head;
        while(temp && x<left){
            temp=temp->next;
            x++;
        }
        int idx=0;
        while(temp && x<=right) {
            temp->val=v[idx++];
            temp=temp->next;
            x++;
        }
        return head;
    }
};
