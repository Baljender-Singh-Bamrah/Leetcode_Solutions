class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(auto it:nums){
            if(mp[it]<2){
                mp[it]++;
            }
        }
        nums.clear();
        for(auto it:mp){
            while(it.second--){
                nums.push_back(it.first);
            }
        }

        sort(nums.begin(),nums.end());

        return nums.size();
    }
};
