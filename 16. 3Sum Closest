Approach 1 : Two Pointer , TC-o(NlogN)

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        
        int closestSum = 100000;
        
        for(int i = 0; i<n-2; i++) {
            
            int l = i+1, r = n-1;
            while(l < r) {
                int sum = nums[i] + nums[l] + nums[r];
                
                if(abs(target-sum) < abs(target-closestSum)) {
                    closestSum = sum;
                }
                
                if(sum > target)
                    r--;
                else
                    l++;
            }
        }
        return closestSum;
    }
};




Appraoch 2 : Brute Force , O(N*3)

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int msum = INT_MAX;
        int md=INT_MAX;  
        for(int i = 0; i < nums.size() - 2; i++) {
            for(int j = i + 1; j < nums.size() - 1; j++) {
                for(int k = j + 1; k < nums.size(); k++) {
                    int sum = nums[i] + nums[j] + nums[k];
                    int cd=abs(sum-target);
                    if(cd<md) {
                        if(md==0)
                            return msum;
                        msum = sum;
                        md=cd;
                    }
                }
            }
        }
        return msum;
    }
};
